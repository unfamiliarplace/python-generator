'use strict';import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,__ipow__,
__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,filter,float,getattr,
hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{Sequence}from"./formula.pg_sequence.js";import{Formula_Requirement}from"./formula.pg_formula_requirement.js";import{FN}from"./formula.pg_formula_node.js";var __name__="formula.pg_formula_pattern";export var Formula_Pattern=__class__("Formula_Pattern",
[object],{__module__:__name__,get __init__(){return __get__(this,function(self){var reqs=null;var weight=1;var brackets=false;var prefix="";var suffix="";if(arguments.length){var __ilastarg0__=arguments.length-1;if(arguments[__ilastarg0__]&&arguments[__ilastarg0__].hasOwnProperty("__kwargtrans__")){var __allkwargs0__=arguments[__ilastarg0__--];for(var __attrib0__ in __allkwargs0__)switch(__attrib0__){case "self":var self=__allkwargs0__[__attrib0__];break;case "reqs":var reqs=__allkwargs0__[__attrib0__];
break;case "weight":var weight=__allkwargs0__[__attrib0__];break;case "brackets":var brackets=__allkwargs0__[__attrib0__];break;case "prefix":var prefix=__allkwargs0__[__attrib0__];break;case "suffix":var suffix=__allkwargs0__[__attrib0__];break}}var nodes=tuple([].slice.apply(arguments).slice(1,__ilastarg0__+1))}else var nodes=tuple();self.nodes=nodes;self.reqs=reqs;self.weight=weight;self.brackets=brackets;self.prefix=prefix;self.suffix=suffix;self.bracket_open=self.brackets?"(":"";self.bracket_close=
self.brackets?"(":""})},get possible(){return __get__(this,function(self){if(arguments.length){var __ilastarg0__=arguments.length-1;if(arguments[__ilastarg0__]&&arguments[__ilastarg0__].hasOwnProperty("__kwargtrans__")){var __allkwargs0__=arguments[__ilastarg0__--];for(var __attrib0__ in __allkwargs0__)switch(__attrib0__){case "self":var self=__allkwargs0__[__attrib0__];break}}}else;return self.reqs===null||self.reqs.met()})},get uses(){return __get__(this,function(self){if(arguments.length){var __ilastarg0__=
arguments.length-1;if(arguments[__ilastarg0__]&&arguments[__ilastarg0__].hasOwnProperty("__kwargtrans__")){var __allkwargs0__=arguments[__ilastarg0__--];for(var __attrib0__ in __allkwargs0__)switch(__attrib0__){case "self":var self=__allkwargs0__[__attrib0__];break}}var clses=tuple([].slice.apply(arguments).slice(1,__ilastarg0__+1))}else var clses=tuple();for(var cls of clses)if(any(function(){var __accu0__=[];for(var c of self.nodes)__accu0__.append(c.component_cls==cls);return py_iter(__accu0__)}()))return true;
return false})},get generate(){return __get__(this,function(self){if(arguments.length){var __ilastarg0__=arguments.length-1;if(arguments[__ilastarg0__]&&arguments[__ilastarg0__].hasOwnProperty("__kwargtrans__")){var __allkwargs0__=arguments[__ilastarg0__--];for(var __attrib0__ in __allkwargs0__)switch(__attrib0__){case "self":var self=__allkwargs0__[__attrib0__];break}}}else;return Sequence(...function(){var __accu0__=[];for(var c of self.nodes)__accu0__.append(str(c));return py_iter(__accu0__)}())})},
get __str__(){return __get__(this,function(self){if(arguments.length){var __ilastarg0__=arguments.length-1;if(arguments[__ilastarg0__]&&arguments[__ilastarg0__].hasOwnProperty("__kwargtrans__")){var __allkwargs0__=arguments[__ilastarg0__--];for(var __attrib0__ in __allkwargs0__)switch(__attrib0__){case "self":var self=__allkwargs0__[__attrib0__];break}}}else;var s=self.generate();return"{}{}{}{}{}".format(self.prefix,self.bracket_open,s,self.bracket_close,self.suffix)})}});export var FP=Formula_Pattern;

//# sourceMappingURL=formula.pg_formula_pattern.map